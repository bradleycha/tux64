tux64-boot is a Linux bootloader for the Nintendo 64.  It compiles binary code
files required for different stages of the bootloader.  The binary files are
intended to be used with tux64-mkrom to create a Nintendo 64 ROM image which can
boot and run Linux.

The following files are created:
   
   * stage0.bin - The code to run in place of the IPL3 and perform basic
                  hardware initialization required for stage 1.

   * stage0.bin.cic - Data placed at the end of RSP DMEM to force the CIC
                      checksum to match the CIC-6102's IPL3 checksum.  This is
                      required in order to boot on real hardware.

   * stage1.bin - The main bootloader binary.  This is what most users will
                  interact with and contains most of the bootloader code.

   * stage1.bin.bss - A text file which contains a hexadecmal string storing the
                      length of the .bss section for stage1.bin.  This is used
                      to store the amount of memory to allocate for the stage-1
                      bootloader.  If this is empty, that means there is no
                      memory to allocate.

   * stage2.bin - The code used to free stage 1 from memory and load the kernel,
                  initramfs, and command-line into main memory and start the
                  kernel.

In order to build this, you will need a cross-compiler which can target
mips64-elf.  To accomplish this, please refer to the installation instructions
for Tux64.

For developers and the curious reader, here is the boot process from console
power-on to kernel entry:

   1: Power ON/Reset - hardware powers on and performs their own specific basic
                       initialization, CPU program counter is set to
                       0xbfc00000, which maps to the start of PIF ROM, which
                       contains the IPL1 and IPL2.  The CPU now begins executing
                       the IPL1 directly from PIF ROM.

   2: IPL1 - this essentially does little more than set some basic hardware
             registers to a consistent state and load the IPL2 from PIF ROM into
             RSP IMEM.  This is done because executing directly from PIF ROM is
             extremely slow.  Once this finishes, the CPU jumps to RSP IMEM and
             executues the IPL2.

   3: IPL2 - this initializes the PI cartridge timings to their slowest valies
             to allow reading the cartridge ROM header, which contains the
             fastest PI cartridge timings supported by the cartridge ROM.

             next, the 4096 bytes of cartridge ROM are copied into RSP DMEM.
             this contains the full ROM header as well as the IPL3.  for
             tux64-boot, we instead store the stage-0 bootloader where the IPL3
             should be.

             however, before the IPL2 jumps to RSP DMEM, it uses the CIC to
             compute and verify the checksum of the IPL3.  if it doesn't match
             the checksum expected by the cartridge's CIC, it will halt the main
             CPU, effectively halting the boot process.  this means we must add
             data to stage-0 to force the checksum to match the CIC,
             specifically the CIC-6102.  this is the reason for stage0.bin.cic.

             once the checksum verification passes, the IPL2 jumps to
             RSP DMEM + 64, which is the start of the IPL3, or in this case, the
             stage-0 bootloader.

   4: stage-0 bootloader - this primarily initializes RDRAM, initializes the CPU
                           cache, and detects the amount of free memory.  the
                           bootloader header will be read to determine if the
                           stage-1 bootloader will fit into memory, as well as
                           configure boot parameters and more.

                           once all checks pass, we will prepare to run the
                           stage-1 bootloader.  we start an RSP DMA transfer to
                           load the stage-1 bootloader into RDRAM+0x1000.  next,
                           we store the bootloader header after the allocated
                           space for the bootloader.  this is so we can have
                           future bootloader versions allow for extensions to
                           the base bootloader header while remaining fully
                           backwards-compatible.  we store the pointer to the
                           bootloader header, initialize the stack pointer to
                           RDRAM + 0x1000 to give us a 4kb stack, then move the
                           program counter to RDRAM + 0x1000 to start the
                           stage-1 bootloader.

   5. stage-1 bootloader - this is the main bootloader.  at this point, we have
                           all of the console's resources available, so we can
                           initialize graphics, poll controller input, and do
                           many other fancy things previously not possible.

                           this will provide diagnostics information on-screen,
                           allow tweaking boot options by the user, and also do
                           checks on the rest of the boot items to make sure
                           nothing was corrupted due to a dirty cartridge.

                           once all checks pass and we are ready to load the
                           kernel, initramfs, and kernel command-line, we will
                           copy the stage-2 bootloader header into RSP DMEM,
                           initialize the stack into RSP DMEM, and load the
                           stage-2 bootloader into RSP IMEM.  this will allow us
                           to free the stage-1 bootloader from memory so that no
                           memory is wasted.  we then jump to RSP IMEM to
                           execute the stage-2 bootloader.

   6. stage-2 bootloader - this uses RSP DMA to load the kernel, initramfs, and
                           kernel command-line into RDRAM and nothing else.  all
                           sanity checks were done by the stage-1 bootloader, so
                           we can make many assumptions here.

                           once complete, we jump to the kernel start address
                           and execute the kernel.

