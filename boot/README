tux64-boot is a Linux bootloader for the Nintendo 64.  It compiles binary code
files required for different stages of the bootloader.  The binary files are
intended to be used with tux64-mkrom to create a Nintendo 64 ROM image which can
boot and run Linux.

The following files are created:

   * stage0.bin - The code to run in place of the IPL3.  It performs basic
                  hardware initialization, verifies the checksum of the stage-1
                  bootloader, then start the stage-1 bootloader.

   * stage0.bin.cic - Data placed at the end of RSP DMEM to force the CIC
                      checksum to match the CIC-6102's IPL3 checksum.  This is
                      required in order to boot on real hardware.

   * stage1.bin - The main bootloader binary.  This is what most users will
                  interact with and contains most of the bootloader code.

   * stage1.bin.bss - A text file which contains a hexadecmal string storing the
                      length of the .bss section for stage2.bin.  This is used
                      to store the amount of memory to allocate for the stage-2
                      bootloader.  If this is empty, that means there is no
                      memory to allocate.

   * stage2.bin - The code used to free the stage-1 bootloader from memory,
                  allowing all of RDRAM to be allocated to the kernel,
                  initramfs, and command-line.  This will be responsible for
                  loading the above items into memory and starting the kernel.

In order to build this, you will need a cross-compiler which can target
mips64-elf.  To accomplish this, please refer to the installation instructions
for Tux64.

For developers and the curious reader, here is the boot process from console
power-on to kernel entry:

   1: Power ON/Reset - hardware powers on and performs their own specific basic
                       initialization, CPU program counter is set to
                       0xbfc00000, which maps to the start of PIF ROM, which
                       contains the IPL1 and IPL2.  The CPU now begins executing
                       the IPL1 directly from PIF ROM.

   2: IPL1 - this essentially does little more than set some basic hardware
             registers to a consistent state and load the IPL2 from PIF ROM into
             RSP IMEM.  This is done because executing directly from PIF ROM is
             extremely slow.  Once this finishes, the CPU jumps to RSP IMEM and
             executues the IPL2.

   3: IPL2 - this initializes the PI cartridge timings to their slowest valies
             to allow reading the cartridge ROM header, which contains the
             fastest PI cartridge timings supported by the cartridge ROM.

             next, the 4096 bytes of cartridge ROM are copied into RSP DMEM.
             this contains the full ROM header as well as the IPL3.  for
             tux64-boot, we instead store the stage-0 bootloader where the IPL3
             should be.

             however, before the IPL2 jumps to RSP DMEM, it uses the CIC to
             compute and verify the checksum of the IPL3.  if it doesn't match
             the checksum expected by the cartridge's CIC, it will halt the main
             CPU, effectively halting the boot process.  this means we must add
             data to stage-0 to force the checksum to match the CIC,
             specifically the CIC-6102.  this is the reason for stage0.bin.cic.

             once the checksum verification passes, the IPL2 jumps to
             RSP DMEM + 64, which is the start of the IPL3, or in this case, the
             stage-0 bootloader.

   4: stage-0 bootloader - this first does basic hardware initialization, which
                           includes initializing RDRAM, initializing the CPU
                           caches, and initializing COP0 registers.  Once
                           complete, the bootloader header is loaded into RDRAM.
                           A checksum is computed on the bootloader header to
                           protect against corruption.  Once complete, the
                           stage-1 bootloader is loaded into RDRAM, where it
                           has its checksum computed and verified.  At this
                           point, we are ready to execute the stage-1
                           bootloader.  We send the boot termination command to
                           the PIF, initialize a new stack at the start of
                           RDRAM, and jump to the stage-1 start address.  We
                           want to move out of RSP DMEM as it's slower to
                           execute compared to RDRAM since we can't use cached
                           accesses for RSP memory.  We only initialize enough
                           hardware to get a consistent state and load stage-1
                           into RDRAM.

   5: stage-1 bootloader - this provides all of the interactive components of
                           the bootloader.  on-screen logging is performed to
                           display the boot process.  once ready to load the
                           kernel, the stage-2 bootloader will be loaded into
                           RSP IMEM, its checksum will be verified, the stack
                           will be moved to the top of RSP DMEM, and execution
                           will jump to the stage-2 start address.  Importantly,
                           this will free all of RDRAM for use by Linux, so we
                           can make stage-1 as fancy and big as we want without
                           competing with Linux for work ram, although we still
                           have to consider cartridge ROM.

   6: stage-2 bootloader - this loads the kernel into memory, decompresses it,
                           performs relocations to support KASLR, decompresses
                           and loads the initramfs, and loads the command-line.
                           once complete, we initialize a new stack into RDRAM
                           and jump to the kernel start address.

