#------------------------------------------------------------------------------#
#                           Copyright (c) Tux64 2025                           #
#                     https://github.com/bradleycha/tux64                      #
#------------------------------------------------------------------------------#
# boot/src/tux64-boot/stage1/interrupt/entry.s - Interrupt service routine     #
#    entry function implementation.                                            #
#------------------------------------------------------------------------------#

# disable syntactic sugar so we have complete control
.set noreorder
.set noat
.set nomacro

.equ TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_COP0_REGISTER_EPC,$14

# WARNING: these must be maintained manually.  we used to use extended ASM
# templates to do this, but GCC doesn't like using global exteneded ASM with
# LTO.
.equ TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_BYTES,0x0118
.equ TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET,0x0000
.equ TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES,0x0008

.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_ZERO,((0 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_AT,(( 1 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_V0,(( 2 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_V1,(( 3 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_A0,(( 4 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_A1,(( 5 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_A2,(( 6 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_A3,(( 7 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T0,(( 8 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T1,(( 9 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T2,((10 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T3,((11 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T4,((12 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T5,((13 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T6,((14 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T7,((15 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S0,((16 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S1,((17 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S2,((18 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S3,((19 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S4,((20 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S5,((21 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S6,((22 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S7,((23 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T8,((24 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T9,((25 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_K0,((26 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_K1,((27 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_GP,((28 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_SP,((29 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_FP,((30 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_RA,((31 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_PC,((32 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_LO,((33 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)
.equ TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_HI,((34 * TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_REGISTER_BYTES) + TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_REGISTER_FILE_OFFSET)

.extern tux64_boot_stage1_interrupt_handler

   .section .text
   .global tux64_boot_stage1_interrupt_entry
tux64_boot_stage1_interrupt_entry:
   # make room for the context struct
   addiu $sp,$sp,-TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_BYTES

   # populate context struct with register file
   sd    $zero,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_ZERO($sp)
   sd    $at,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_AT($sp)
   sd    $v0,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_V0($sp)
   sd    $v1,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_V1($sp)
   sd    $a0,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_A0($sp)
   sd    $a1,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_A1($sp)
   sd    $a2,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_A2($sp)
   sd    $a3,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_A3($sp)
   sd    $t0,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T0($sp)
   sd    $t1,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T1($sp)
   sd    $t2,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T2($sp)
   sd    $t3,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T3($sp)
   sd    $t4,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T4($sp)
   sd    $t5,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T5($sp)
   sd    $t6,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T6($sp)
   sd    $t7,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T7($sp)
   sd    $s0,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S0($sp)
   sd    $s1,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S1($sp)
   sd    $s2,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S2($sp)
   sd    $s3,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S3($sp)
   sd    $s4,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S4($sp)
   sd    $s5,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S5($sp)
   sd    $s6,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S6($sp)
   sd    $s7,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S7($sp)
   sd    $t8,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T8($sp)
   sd    $t9,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T9($sp)
   sd    $k0,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_K0($sp)
   sd    $k1,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_K1($sp)

   # prepare a couple of special registers which require a little bit of elbow
   # elbow grease to read.  we already preserved the temp registers, so we can
   # freely use these.
   addiu $t0,$sp,TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_CONTEXT_BYTES
   mfc0  $t1,TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_COP0_REGISTER_EPC
   mflo  $t2
   mfhi  $t3

   # continue storing the rest of the register file
   sd    $gp,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_GP($sp)
   sd    $t0,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_SP($sp)
   sd    $fp,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_FP($sp)
   sd    $ra,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_RA($sp)
   sd    $t1,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_PC($sp)
   sd    $t2,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_LO($sp)
   sd    $t3,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_HI($sp)

   # run the interrupt handler with the context struct
   jal   tux64_boot_stage1_interrupt_handler
   addiu $a0,$sp,0

   # restore the register file from the context struct, since the interrupt
   # handler may modify any of the registers (ex: GDB).  note that we save $sp
   # for last, as that messes with the code.  otherwise, it's just the reverse
   # of the above.
   ld    $t3,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_HI($sp)
   ld    $t2,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_LO($sp)
   ld    $t1,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_PC($sp)
   ld    $ra,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_RA($sp)
   ld    $fp,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_FP($sp)
   ld    $gp,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_GP($sp)
   mthi  $t3
   mtlo  $t2
   mtc0  $t1,TUX64_BOOT_STAGE1_INTERRUPT_ENTRY_COP0_REGISTER_EPC
   ld    $k1,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_K1($sp)
   ld    $k0,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_K0($sp)
   ld    $t9,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T9($sp)
   ld    $t8,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T8($sp)
   ld    $s7,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S7($sp)
   ld    $s6,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S6($sp)
   ld    $s5,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S5($sp)
   ld    $s4,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S4($sp)
   ld    $s3,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S3($sp)
   ld    $s2,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S2($sp)
   ld    $s1,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S1($sp)
   ld    $s0,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_S0($sp)
   ld    $t7,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T7($sp)
   ld    $t6,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T6($sp)
   ld    $t5,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T5($sp)
   ld    $t4,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T4($sp)
   ld    $t3,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T3($sp)
   ld    $t2,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T2($sp)
   ld    $t1,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T1($sp)
   ld    $t0,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_T0($sp)
   ld    $a3,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_A3($sp)
   ld    $a2,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_A2($sp)
   ld    $a1,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_A1($sp)
   ld    $a0,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_A0($sp)
   ld    $v1,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_V1($sp)
   ld    $v0,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_V0($sp)
   ld    $at,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_AT($sp)
   ld    $zero,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_ZERO($sp)

   # finally, restore the stack and return from interrupt
   ld    $sp,TUX64_BOOT_STAGE1_INTERRUPT_CONTEXT_REGISTER_SP($sp)
   eret
#tux64_boot_stage1_interrupt_entry

